// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parameter.proto

#ifndef PROTOBUF_parameter_2eproto__INCLUDED
#define PROTOBUF_parameter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace parameters {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_parameter_2eproto();
void protobuf_AssignDesc_parameter_2eproto();
void protobuf_ShutdownFile_parameter_2eproto();

class NDArrayType;
class KeyValueType;
class VectorType;
class TimeIndexedType;
class Value;
class Parameter;

enum ParameterType {
  NONE = 0,
  INPUT = 1,
  OUTPUT = 2,
  STATE = 4,
  CONTROL = 8
};
bool ParameterType_IsValid(int value);
const ParameterType ParameterType_MIN = NONE;
const ParameterType ParameterType_MAX = CONTROL;
const int ParameterType_ARRAYSIZE = ParameterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParameterType_descriptor();
inline const ::std::string& ParameterType_Name(ParameterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParameterType_descriptor(), value);
}
inline bool ParameterType_Parse(
    const ::std::string& name, ParameterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParameterType>(
    ParameterType_descriptor(), name, value);
}
// ===================================================================

class NDArrayType : public ::google::protobuf::Message {
 public:
  NDArrayType();
  virtual ~NDArrayType();

  NDArrayType(const NDArrayType& from);

  inline NDArrayType& operator=(const NDArrayType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NDArrayType& default_instance();

  void Swap(NDArrayType* other);

  // implements Message ----------------------------------------------

  NDArrayType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NDArrayType& from);
  void MergeFrom(const NDArrayType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 dimensions = 1;
  inline bool has_dimensions() const;
  inline void clear_dimensions();
  static const int kDimensionsFieldNumber = 1;
  inline ::google::protobuf::int64 dimensions() const;
  inline void set_dimensions(::google::protobuf::int64 value);

  // repeated int64 shape = 2;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 2;
  inline ::google::protobuf::int64 shape(int index) const;
  inline void set_shape(int index, ::google::protobuf::int64 value);
  inline void add_shape(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      shape() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_shape();

  // repeated bytes byte_data = 3;
  inline int byte_data_size() const;
  inline void clear_byte_data();
  static const int kByteDataFieldNumber = 3;
  inline const ::std::string& byte_data(int index) const;
  inline ::std::string* mutable_byte_data(int index);
  inline void set_byte_data(int index, const ::std::string& value);
  inline void set_byte_data(int index, const char* value);
  inline void set_byte_data(int index, const void* value, size_t size);
  inline ::std::string* add_byte_data();
  inline void add_byte_data(const ::std::string& value);
  inline void add_byte_data(const char* value);
  inline void add_byte_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& byte_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_byte_data();

  // repeated float float_data = 4;
  inline int float_data_size() const;
  inline void clear_float_data();
  static const int kFloatDataFieldNumber = 4;
  inline float float_data(int index) const;
  inline void set_float_data(int index, float value);
  inline void add_float_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // repeated double double_data = 5;
  inline int double_data_size() const;
  inline void clear_double_data();
  static const int kDoubleDataFieldNumber = 5;
  inline double double_data(int index) const;
  inline void set_double_data(int index, double value);
  inline void add_double_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated int32 int_data = 6;
  inline int int_data_size() const;
  inline void clear_int_data();
  static const int kIntDataFieldNumber = 6;
  inline ::google::protobuf::int32 int_data(int index) const;
  inline void set_int_data(int index, ::google::protobuf::int32 value);
  inline void add_int_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int_data();

  // @@protoc_insertion_point(class_scope:parameters.NDArrayType)
 private:
  inline void set_has_dimensions();
  inline void clear_has_dimensions();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 dimensions_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > shape_;
  ::google::protobuf::RepeatedPtrField< ::std::string> byte_data_;
  ::google::protobuf::RepeatedField< float > float_data_;
  ::google::protobuf::RepeatedField< double > double_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int_data_;
  friend void  protobuf_AddDesc_parameter_2eproto();
  friend void protobuf_AssignDesc_parameter_2eproto();
  friend void protobuf_ShutdownFile_parameter_2eproto();

  void InitAsDefaultInstance();
  static NDArrayType* default_instance_;
};
// -------------------------------------------------------------------

class KeyValueType : public ::google::protobuf::Message {
 public:
  KeyValueType();
  virtual ~KeyValueType();

  KeyValueType(const KeyValueType& from);

  inline KeyValueType& operator=(const KeyValueType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValueType& default_instance();

  void Swap(KeyValueType* other);

  // implements Message ----------------------------------------------

  KeyValueType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValueType& from);
  void MergeFrom(const KeyValueType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string string_key = 1;
  inline int string_key_size() const;
  inline void clear_string_key();
  static const int kStringKeyFieldNumber = 1;
  inline const ::std::string& string_key(int index) const;
  inline ::std::string* mutable_string_key(int index);
  inline void set_string_key(int index, const ::std::string& value);
  inline void set_string_key(int index, const char* value);
  inline void set_string_key(int index, const char* value, size_t size);
  inline ::std::string* add_string_key();
  inline void add_string_key(const ::std::string& value);
  inline void add_string_key(const char* value);
  inline void add_string_key(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& string_key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_key();

  // repeated int32 int_key = 2;
  inline int int_key_size() const;
  inline void clear_int_key();
  static const int kIntKeyFieldNumber = 2;
  inline ::google::protobuf::int32 int_key(int index) const;
  inline void set_int_key(int index, ::google::protobuf::int32 value);
  inline void add_int_key(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int_key() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int_key();

  // repeated int64 long_key = 3;
  inline int long_key_size() const;
  inline void clear_long_key();
  static const int kLongKeyFieldNumber = 3;
  inline ::google::protobuf::int64 long_key(int index) const;
  inline void set_long_key(int index, ::google::protobuf::int64 value);
  inline void add_long_key(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      long_key() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_long_key();

  // repeated double double_key = 4;
  inline int double_key_size() const;
  inline void clear_double_key();
  static const int kDoubleKeyFieldNumber = 4;
  inline double double_key(int index) const;
  inline void set_double_key(int index, double value);
  inline void add_double_key(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_key() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_key();

  // repeated float float_key = 5;
  inline int float_key_size() const;
  inline void clear_float_key();
  static const int kFloatKeyFieldNumber = 5;
  inline float float_key(int index) const;
  inline void set_float_key(int index, float value);
  inline void add_float_key(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      float_key() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_float_key();

  // repeated int32 int_values = 6;
  inline int int_values_size() const;
  inline void clear_int_values();
  static const int kIntValuesFieldNumber = 6;
  inline ::google::protobuf::int32 int_values(int index) const;
  inline void set_int_values(int index, ::google::protobuf::int32 value);
  inline void add_int_values(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int_values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int_values();

  // repeated int64 long_values = 7;
  inline int long_values_size() const;
  inline void clear_long_values();
  static const int kLongValuesFieldNumber = 7;
  inline ::google::protobuf::int64 long_values(int index) const;
  inline void set_long_values(int index, ::google::protobuf::int64 value);
  inline void add_long_values(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      long_values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_long_values();

  // repeated double double_values = 8;
  inline int double_values_size() const;
  inline void clear_double_values();
  static const int kDoubleValuesFieldNumber = 8;
  inline double double_values(int index) const;
  inline void set_double_values(int index, double value);
  inline void add_double_values(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_values() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_values();

  // repeated float float_values = 9;
  inline int float_values_size() const;
  inline void clear_float_values();
  static const int kFloatValuesFieldNumber = 9;
  inline float float_values(int index) const;
  inline void set_float_values(int index, float value);
  inline void add_float_values(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      float_values() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_float_values();

  // repeated .parameters.NDArrayType NDArray_values = 10;
  inline int ndarray_values_size() const;
  inline void clear_ndarray_values();
  static const int kNDArrayValuesFieldNumber = 10;
  inline const ::parameters::NDArrayType& ndarray_values(int index) const;
  inline ::parameters::NDArrayType* mutable_ndarray_values(int index);
  inline ::parameters::NDArrayType* add_ndarray_values();
  inline const ::google::protobuf::RepeatedPtrField< ::parameters::NDArrayType >&
      ndarray_values() const;
  inline ::google::protobuf::RepeatedPtrField< ::parameters::NDArrayType >*
      mutable_ndarray_values();

  // @@protoc_insertion_point(class_scope:parameters.KeyValueType)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_key_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int_key_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > long_key_;
  ::google::protobuf::RepeatedField< double > double_key_;
  ::google::protobuf::RepeatedField< float > float_key_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int_values_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > long_values_;
  ::google::protobuf::RepeatedField< double > double_values_;
  ::google::protobuf::RepeatedField< float > float_values_;
  ::google::protobuf::RepeatedPtrField< ::parameters::NDArrayType > ndarray_values_;
  friend void  protobuf_AddDesc_parameter_2eproto();
  friend void protobuf_AssignDesc_parameter_2eproto();
  friend void protobuf_ShutdownFile_parameter_2eproto();

  void InitAsDefaultInstance();
  static KeyValueType* default_instance_;
};
// -------------------------------------------------------------------

class VectorType : public ::google::protobuf::Message {
 public:
  VectorType();
  virtual ~VectorType();

  VectorType(const VectorType& from);

  inline VectorType& operator=(const VectorType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorType& default_instance();

  void Swap(VectorType* other);

  // implements Message ----------------------------------------------

  VectorType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorType& from);
  void MergeFrom(const VectorType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:parameters.VectorType)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_parameter_2eproto();
  friend void protobuf_AssignDesc_parameter_2eproto();
  friend void protobuf_ShutdownFile_parameter_2eproto();

  void InitAsDefaultInstance();
  static VectorType* default_instance_;
};
// -------------------------------------------------------------------

class TimeIndexedType : public ::google::protobuf::Message {
 public:
  TimeIndexedType();
  virtual ~TimeIndexedType();

  TimeIndexedType(const TimeIndexedType& from);

  inline TimeIndexedType& operator=(const TimeIndexedType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeIndexedType& default_instance();

  void Swap(TimeIndexedType* other);

  // implements Message ----------------------------------------------

  TimeIndexedType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeIndexedType& from);
  void MergeFrom(const TimeIndexedType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 time_index = 1;
  inline int time_index_size() const;
  inline void clear_time_index();
  static const int kTimeIndexFieldNumber = 1;
  inline ::google::protobuf::int64 time_index(int index) const;
  inline void set_time_index(int index, ::google::protobuf::int64 value);
  inline void add_time_index(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      time_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_time_index();

  // repeated .parameters.NDArrayType array_values = 2;
  inline int array_values_size() const;
  inline void clear_array_values();
  static const int kArrayValuesFieldNumber = 2;
  inline const ::parameters::NDArrayType& array_values(int index) const;
  inline ::parameters::NDArrayType* mutable_array_values(int index);
  inline ::parameters::NDArrayType* add_array_values();
  inline const ::google::protobuf::RepeatedPtrField< ::parameters::NDArrayType >&
      array_values() const;
  inline ::google::protobuf::RepeatedPtrField< ::parameters::NDArrayType >*
      mutable_array_values();

  // repeated .parameters.KeyValueType KeyValue_values = 3;
  inline int keyvalue_values_size() const;
  inline void clear_keyvalue_values();
  static const int kKeyValueValuesFieldNumber = 3;
  inline const ::parameters::KeyValueType& keyvalue_values(int index) const;
  inline ::parameters::KeyValueType* mutable_keyvalue_values(int index);
  inline ::parameters::KeyValueType* add_keyvalue_values();
  inline const ::google::protobuf::RepeatedPtrField< ::parameters::KeyValueType >&
      keyvalue_values() const;
  inline ::google::protobuf::RepeatedPtrField< ::parameters::KeyValueType >*
      mutable_keyvalue_values();

  // repeated .parameters.VectorType vector_values = 5;
  inline int vector_values_size() const;
  inline void clear_vector_values();
  static const int kVectorValuesFieldNumber = 5;
  inline const ::parameters::VectorType& vector_values(int index) const;
  inline ::parameters::VectorType* mutable_vector_values(int index);
  inline ::parameters::VectorType* add_vector_values();
  inline const ::google::protobuf::RepeatedPtrField< ::parameters::VectorType >&
      vector_values() const;
  inline ::google::protobuf::RepeatedPtrField< ::parameters::VectorType >*
      mutable_vector_values();

  // @@protoc_insertion_point(class_scope:parameters.TimeIndexedType)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > time_index_;
  ::google::protobuf::RepeatedPtrField< ::parameters::NDArrayType > array_values_;
  ::google::protobuf::RepeatedPtrField< ::parameters::KeyValueType > keyvalue_values_;
  ::google::protobuf::RepeatedPtrField< ::parameters::VectorType > vector_values_;
  friend void  protobuf_AddDesc_parameter_2eproto();
  friend void protobuf_AssignDesc_parameter_2eproto();
  friend void protobuf_ShutdownFile_parameter_2eproto();

  void InitAsDefaultInstance();
  static TimeIndexedType* default_instance_;
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  void Swap(Value* other);

  // implements Message ----------------------------------------------

  Value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .parameters.NDArrayType ndarray_data = 1;
  inline bool has_ndarray_data() const;
  inline void clear_ndarray_data();
  static const int kNdarrayDataFieldNumber = 1;
  inline const ::parameters::NDArrayType& ndarray_data() const;
  inline ::parameters::NDArrayType* mutable_ndarray_data();
  inline ::parameters::NDArrayType* release_ndarray_data();
  inline void set_allocated_ndarray_data(::parameters::NDArrayType* ndarray_data);

  // optional .parameters.KeyValueType keyvalue_data = 2;
  inline bool has_keyvalue_data() const;
  inline void clear_keyvalue_data();
  static const int kKeyvalueDataFieldNumber = 2;
  inline const ::parameters::KeyValueType& keyvalue_data() const;
  inline ::parameters::KeyValueType* mutable_keyvalue_data();
  inline ::parameters::KeyValueType* release_keyvalue_data();
  inline void set_allocated_keyvalue_data(::parameters::KeyValueType* keyvalue_data);

  // optional .parameters.VectorType vector_data = 4;
  inline bool has_vector_data() const;
  inline void clear_vector_data();
  static const int kVectorDataFieldNumber = 4;
  inline const ::parameters::VectorType& vector_data() const;
  inline ::parameters::VectorType* mutable_vector_data();
  inline ::parameters::VectorType* release_vector_data();
  inline void set_allocated_vector_data(::parameters::VectorType* vector_data);

  // optional .parameters.TimeIndexedType timeindexed_data = 5;
  inline bool has_timeindexed_data() const;
  inline void clear_timeindexed_data();
  static const int kTimeindexedDataFieldNumber = 5;
  inline const ::parameters::TimeIndexedType& timeindexed_data() const;
  inline ::parameters::TimeIndexedType* mutable_timeindexed_data();
  inline ::parameters::TimeIndexedType* release_timeindexed_data();
  inline void set_allocated_timeindexed_data(::parameters::TimeIndexedType* timeindexed_data);

  // @@protoc_insertion_point(class_scope:parameters.Value)
 private:
  inline void set_has_ndarray_data();
  inline void clear_has_ndarray_data();
  inline void set_has_keyvalue_data();
  inline void clear_has_keyvalue_data();
  inline void set_has_vector_data();
  inline void clear_has_vector_data();
  inline void set_has_timeindexed_data();
  inline void clear_has_timeindexed_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::parameters::NDArrayType* ndarray_data_;
  ::parameters::KeyValueType* keyvalue_data_;
  ::parameters::VectorType* vector_data_;
  ::parameters::TimeIndexedType* timeindexed_data_;
  friend void  protobuf_AddDesc_parameter_2eproto();
  friend void protobuf_AssignDesc_parameter_2eproto();
  friend void protobuf_ShutdownFile_parameter_2eproto();

  void InitAsDefaultInstance();
  static Value* default_instance_;
};
// -------------------------------------------------------------------

class Parameter : public ::google::protobuf::Message {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parameter& default_instance();

  void Swap(Parameter* other);

  // implements Message ----------------------------------------------

  Parameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string tree_root = 2;
  inline bool has_tree_root() const;
  inline void clear_tree_root();
  static const int kTreeRootFieldNumber = 2;
  inline const ::std::string& tree_root() const;
  inline void set_tree_root(const ::std::string& value);
  inline void set_tree_root(const char* value);
  inline void set_tree_root(const char* value, size_t size);
  inline ::std::string* mutable_tree_root();
  inline ::std::string* release_tree_root();
  inline void set_allocated_tree_root(::std::string* tree_root);

  // optional string platform_specific_name = 3;
  inline bool has_platform_specific_name() const;
  inline void clear_platform_specific_name();
  static const int kPlatformSpecificNameFieldNumber = 3;
  inline const ::std::string& platform_specific_name() const;
  inline void set_platform_specific_name(const ::std::string& value);
  inline void set_platform_specific_name(const char* value);
  inline void set_platform_specific_name(const char* value, size_t size);
  inline ::std::string* mutable_platform_specific_name();
  inline ::std::string* release_platform_specific_name();
  inline void set_allocated_platform_specific_name(::std::string* platform_specific_name);

  // optional string platform_agnostic_name = 4;
  inline bool has_platform_agnostic_name() const;
  inline void clear_platform_agnostic_name();
  static const int kPlatformAgnosticNameFieldNumber = 4;
  inline const ::std::string& platform_agnostic_name() const;
  inline void set_platform_agnostic_name(const ::std::string& value);
  inline void set_platform_agnostic_name(const char* value);
  inline void set_platform_agnostic_name(const char* value, size_t size);
  inline ::std::string* mutable_platform_agnostic_name();
  inline ::std::string* release_platform_agnostic_name();
  inline void set_allocated_platform_agnostic_name(::std::string* platform_agnostic_name);

  // optional int64 timestamp_data = 5;
  inline bool has_timestamp_data() const;
  inline void clear_timestamp_data();
  static const int kTimestampDataFieldNumber = 5;
  inline ::google::protobuf::int64 timestamp_data() const;
  inline void set_timestamp_data(::google::protobuf::int64 value);

  // optional .parameters.Value value_data = 6;
  inline bool has_value_data() const;
  inline void clear_value_data();
  static const int kValueDataFieldNumber = 6;
  inline const ::parameters::Value& value_data() const;
  inline ::parameters::Value* mutable_value_data();
  inline ::parameters::Value* release_value_data();
  inline void set_allocated_value_data(::parameters::Value* value_data);

  // optional string tooltip = 7;
  inline bool has_tooltip() const;
  inline void clear_tooltip();
  static const int kTooltipFieldNumber = 7;
  inline const ::std::string& tooltip() const;
  inline void set_tooltip(const ::std::string& value);
  inline void set_tooltip(const char* value);
  inline void set_tooltip(const char* value, size_t size);
  inline ::std::string* mutable_tooltip();
  inline ::std::string* release_tooltip();
  inline void set_allocated_tooltip(::std::string* tooltip);

  // optional string description = 8;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 8;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional .parameters.ParameterType parameter_type = 9;
  inline bool has_parameter_type() const;
  inline void clear_parameter_type();
  static const int kParameterTypeFieldNumber = 9;
  inline ::parameters::ParameterType parameter_type() const;
  inline void set_parameter_type(::parameters::ParameterType value);

  // optional string platform_type_name = 10;
  inline bool has_platform_type_name() const;
  inline void clear_platform_type_name();
  static const int kPlatformTypeNameFieldNumber = 10;
  inline const ::std::string& platform_type_name() const;
  inline void set_platform_type_name(const ::std::string& value);
  inline void set_platform_type_name(const char* value);
  inline void set_platform_type_name(const char* value, size_t size);
  inline ::std::string* mutable_platform_type_name();
  inline ::std::string* release_platform_type_name();
  inline void set_allocated_platform_type_name(::std::string* platform_type_name);

  // @@protoc_insertion_point(class_scope:parameters.Parameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_tree_root();
  inline void clear_has_tree_root();
  inline void set_has_platform_specific_name();
  inline void clear_has_platform_specific_name();
  inline void set_has_platform_agnostic_name();
  inline void clear_has_platform_agnostic_name();
  inline void set_has_timestamp_data();
  inline void clear_has_timestamp_data();
  inline void set_has_value_data();
  inline void clear_has_value_data();
  inline void set_has_tooltip();
  inline void clear_has_tooltip();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_parameter_type();
  inline void clear_has_parameter_type();
  inline void set_has_platform_type_name();
  inline void clear_has_platform_type_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* tree_root_;
  ::std::string* platform_specific_name_;
  ::std::string* platform_agnostic_name_;
  ::google::protobuf::int64 timestamp_data_;
  ::parameters::Value* value_data_;
  ::std::string* tooltip_;
  ::std::string* description_;
  ::std::string* platform_type_name_;
  int parameter_type_;
  friend void  protobuf_AddDesc_parameter_2eproto();
  friend void protobuf_AssignDesc_parameter_2eproto();
  friend void protobuf_ShutdownFile_parameter_2eproto();

  void InitAsDefaultInstance();
  static Parameter* default_instance_;
};
// ===================================================================


// ===================================================================

// NDArrayType

// required int64 dimensions = 1;
inline bool NDArrayType::has_dimensions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NDArrayType::set_has_dimensions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NDArrayType::clear_has_dimensions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NDArrayType::clear_dimensions() {
  dimensions_ = GOOGLE_LONGLONG(0);
  clear_has_dimensions();
}
inline ::google::protobuf::int64 NDArrayType::dimensions() const {
  // @@protoc_insertion_point(field_get:parameters.NDArrayType.dimensions)
  return dimensions_;
}
inline void NDArrayType::set_dimensions(::google::protobuf::int64 value) {
  set_has_dimensions();
  dimensions_ = value;
  // @@protoc_insertion_point(field_set:parameters.NDArrayType.dimensions)
}

// repeated int64 shape = 2;
inline int NDArrayType::shape_size() const {
  return shape_.size();
}
inline void NDArrayType::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int64 NDArrayType::shape(int index) const {
  // @@protoc_insertion_point(field_get:parameters.NDArrayType.shape)
  return shape_.Get(index);
}
inline void NDArrayType::set_shape(int index, ::google::protobuf::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:parameters.NDArrayType.shape)
}
inline void NDArrayType::add_shape(::google::protobuf::int64 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:parameters.NDArrayType.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
NDArrayType::shape() const {
  // @@protoc_insertion_point(field_list:parameters.NDArrayType.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
NDArrayType::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:parameters.NDArrayType.shape)
  return &shape_;
}

// repeated bytes byte_data = 3;
inline int NDArrayType::byte_data_size() const {
  return byte_data_.size();
}
inline void NDArrayType::clear_byte_data() {
  byte_data_.Clear();
}
inline const ::std::string& NDArrayType::byte_data(int index) const {
  // @@protoc_insertion_point(field_get:parameters.NDArrayType.byte_data)
  return byte_data_.Get(index);
}
inline ::std::string* NDArrayType::mutable_byte_data(int index) {
  // @@protoc_insertion_point(field_mutable:parameters.NDArrayType.byte_data)
  return byte_data_.Mutable(index);
}
inline void NDArrayType::set_byte_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:parameters.NDArrayType.byte_data)
  byte_data_.Mutable(index)->assign(value);
}
inline void NDArrayType::set_byte_data(int index, const char* value) {
  byte_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:parameters.NDArrayType.byte_data)
}
inline void NDArrayType::set_byte_data(int index, const void* value, size_t size) {
  byte_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:parameters.NDArrayType.byte_data)
}
inline ::std::string* NDArrayType::add_byte_data() {
  return byte_data_.Add();
}
inline void NDArrayType::add_byte_data(const ::std::string& value) {
  byte_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:parameters.NDArrayType.byte_data)
}
inline void NDArrayType::add_byte_data(const char* value) {
  byte_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:parameters.NDArrayType.byte_data)
}
inline void NDArrayType::add_byte_data(const void* value, size_t size) {
  byte_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:parameters.NDArrayType.byte_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NDArrayType::byte_data() const {
  // @@protoc_insertion_point(field_list:parameters.NDArrayType.byte_data)
  return byte_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NDArrayType::mutable_byte_data() {
  // @@protoc_insertion_point(field_mutable_list:parameters.NDArrayType.byte_data)
  return &byte_data_;
}

// repeated float float_data = 4;
inline int NDArrayType::float_data_size() const {
  return float_data_.size();
}
inline void NDArrayType::clear_float_data() {
  float_data_.Clear();
}
inline float NDArrayType::float_data(int index) const {
  // @@protoc_insertion_point(field_get:parameters.NDArrayType.float_data)
  return float_data_.Get(index);
}
inline void NDArrayType::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:parameters.NDArrayType.float_data)
}
inline void NDArrayType::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:parameters.NDArrayType.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
NDArrayType::float_data() const {
  // @@protoc_insertion_point(field_list:parameters.NDArrayType.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
NDArrayType::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:parameters.NDArrayType.float_data)
  return &float_data_;
}

// repeated double double_data = 5;
inline int NDArrayType::double_data_size() const {
  return double_data_.size();
}
inline void NDArrayType::clear_double_data() {
  double_data_.Clear();
}
inline double NDArrayType::double_data(int index) const {
  // @@protoc_insertion_point(field_get:parameters.NDArrayType.double_data)
  return double_data_.Get(index);
}
inline void NDArrayType::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:parameters.NDArrayType.double_data)
}
inline void NDArrayType::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:parameters.NDArrayType.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
NDArrayType::double_data() const {
  // @@protoc_insertion_point(field_list:parameters.NDArrayType.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
NDArrayType::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:parameters.NDArrayType.double_data)
  return &double_data_;
}

// repeated int32 int_data = 6;
inline int NDArrayType::int_data_size() const {
  return int_data_.size();
}
inline void NDArrayType::clear_int_data() {
  int_data_.Clear();
}
inline ::google::protobuf::int32 NDArrayType::int_data(int index) const {
  // @@protoc_insertion_point(field_get:parameters.NDArrayType.int_data)
  return int_data_.Get(index);
}
inline void NDArrayType::set_int_data(int index, ::google::protobuf::int32 value) {
  int_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:parameters.NDArrayType.int_data)
}
inline void NDArrayType::add_int_data(::google::protobuf::int32 value) {
  int_data_.Add(value);
  // @@protoc_insertion_point(field_add:parameters.NDArrayType.int_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NDArrayType::int_data() const {
  // @@protoc_insertion_point(field_list:parameters.NDArrayType.int_data)
  return int_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NDArrayType::mutable_int_data() {
  // @@protoc_insertion_point(field_mutable_list:parameters.NDArrayType.int_data)
  return &int_data_;
}

// -------------------------------------------------------------------

// KeyValueType

// repeated string string_key = 1;
inline int KeyValueType::string_key_size() const {
  return string_key_.size();
}
inline void KeyValueType::clear_string_key() {
  string_key_.Clear();
}
inline const ::std::string& KeyValueType::string_key(int index) const {
  // @@protoc_insertion_point(field_get:parameters.KeyValueType.string_key)
  return string_key_.Get(index);
}
inline ::std::string* KeyValueType::mutable_string_key(int index) {
  // @@protoc_insertion_point(field_mutable:parameters.KeyValueType.string_key)
  return string_key_.Mutable(index);
}
inline void KeyValueType::set_string_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:parameters.KeyValueType.string_key)
  string_key_.Mutable(index)->assign(value);
}
inline void KeyValueType::set_string_key(int index, const char* value) {
  string_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:parameters.KeyValueType.string_key)
}
inline void KeyValueType::set_string_key(int index, const char* value, size_t size) {
  string_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:parameters.KeyValueType.string_key)
}
inline ::std::string* KeyValueType::add_string_key() {
  return string_key_.Add();
}
inline void KeyValueType::add_string_key(const ::std::string& value) {
  string_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:parameters.KeyValueType.string_key)
}
inline void KeyValueType::add_string_key(const char* value) {
  string_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:parameters.KeyValueType.string_key)
}
inline void KeyValueType::add_string_key(const char* value, size_t size) {
  string_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:parameters.KeyValueType.string_key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
KeyValueType::string_key() const {
  // @@protoc_insertion_point(field_list:parameters.KeyValueType.string_key)
  return string_key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
KeyValueType::mutable_string_key() {
  // @@protoc_insertion_point(field_mutable_list:parameters.KeyValueType.string_key)
  return &string_key_;
}

// repeated int32 int_key = 2;
inline int KeyValueType::int_key_size() const {
  return int_key_.size();
}
inline void KeyValueType::clear_int_key() {
  int_key_.Clear();
}
inline ::google::protobuf::int32 KeyValueType::int_key(int index) const {
  // @@protoc_insertion_point(field_get:parameters.KeyValueType.int_key)
  return int_key_.Get(index);
}
inline void KeyValueType::set_int_key(int index, ::google::protobuf::int32 value) {
  int_key_.Set(index, value);
  // @@protoc_insertion_point(field_set:parameters.KeyValueType.int_key)
}
inline void KeyValueType::add_int_key(::google::protobuf::int32 value) {
  int_key_.Add(value);
  // @@protoc_insertion_point(field_add:parameters.KeyValueType.int_key)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KeyValueType::int_key() const {
  // @@protoc_insertion_point(field_list:parameters.KeyValueType.int_key)
  return int_key_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KeyValueType::mutable_int_key() {
  // @@protoc_insertion_point(field_mutable_list:parameters.KeyValueType.int_key)
  return &int_key_;
}

// repeated int64 long_key = 3;
inline int KeyValueType::long_key_size() const {
  return long_key_.size();
}
inline void KeyValueType::clear_long_key() {
  long_key_.Clear();
}
inline ::google::protobuf::int64 KeyValueType::long_key(int index) const {
  // @@protoc_insertion_point(field_get:parameters.KeyValueType.long_key)
  return long_key_.Get(index);
}
inline void KeyValueType::set_long_key(int index, ::google::protobuf::int64 value) {
  long_key_.Set(index, value);
  // @@protoc_insertion_point(field_set:parameters.KeyValueType.long_key)
}
inline void KeyValueType::add_long_key(::google::protobuf::int64 value) {
  long_key_.Add(value);
  // @@protoc_insertion_point(field_add:parameters.KeyValueType.long_key)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
KeyValueType::long_key() const {
  // @@protoc_insertion_point(field_list:parameters.KeyValueType.long_key)
  return long_key_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
KeyValueType::mutable_long_key() {
  // @@protoc_insertion_point(field_mutable_list:parameters.KeyValueType.long_key)
  return &long_key_;
}

// repeated double double_key = 4;
inline int KeyValueType::double_key_size() const {
  return double_key_.size();
}
inline void KeyValueType::clear_double_key() {
  double_key_.Clear();
}
inline double KeyValueType::double_key(int index) const {
  // @@protoc_insertion_point(field_get:parameters.KeyValueType.double_key)
  return double_key_.Get(index);
}
inline void KeyValueType::set_double_key(int index, double value) {
  double_key_.Set(index, value);
  // @@protoc_insertion_point(field_set:parameters.KeyValueType.double_key)
}
inline void KeyValueType::add_double_key(double value) {
  double_key_.Add(value);
  // @@protoc_insertion_point(field_add:parameters.KeyValueType.double_key)
}
inline const ::google::protobuf::RepeatedField< double >&
KeyValueType::double_key() const {
  // @@protoc_insertion_point(field_list:parameters.KeyValueType.double_key)
  return double_key_;
}
inline ::google::protobuf::RepeatedField< double >*
KeyValueType::mutable_double_key() {
  // @@protoc_insertion_point(field_mutable_list:parameters.KeyValueType.double_key)
  return &double_key_;
}

// repeated float float_key = 5;
inline int KeyValueType::float_key_size() const {
  return float_key_.size();
}
inline void KeyValueType::clear_float_key() {
  float_key_.Clear();
}
inline float KeyValueType::float_key(int index) const {
  // @@protoc_insertion_point(field_get:parameters.KeyValueType.float_key)
  return float_key_.Get(index);
}
inline void KeyValueType::set_float_key(int index, float value) {
  float_key_.Set(index, value);
  // @@protoc_insertion_point(field_set:parameters.KeyValueType.float_key)
}
inline void KeyValueType::add_float_key(float value) {
  float_key_.Add(value);
  // @@protoc_insertion_point(field_add:parameters.KeyValueType.float_key)
}
inline const ::google::protobuf::RepeatedField< float >&
KeyValueType::float_key() const {
  // @@protoc_insertion_point(field_list:parameters.KeyValueType.float_key)
  return float_key_;
}
inline ::google::protobuf::RepeatedField< float >*
KeyValueType::mutable_float_key() {
  // @@protoc_insertion_point(field_mutable_list:parameters.KeyValueType.float_key)
  return &float_key_;
}

// repeated int32 int_values = 6;
inline int KeyValueType::int_values_size() const {
  return int_values_.size();
}
inline void KeyValueType::clear_int_values() {
  int_values_.Clear();
}
inline ::google::protobuf::int32 KeyValueType::int_values(int index) const {
  // @@protoc_insertion_point(field_get:parameters.KeyValueType.int_values)
  return int_values_.Get(index);
}
inline void KeyValueType::set_int_values(int index, ::google::protobuf::int32 value) {
  int_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:parameters.KeyValueType.int_values)
}
inline void KeyValueType::add_int_values(::google::protobuf::int32 value) {
  int_values_.Add(value);
  // @@protoc_insertion_point(field_add:parameters.KeyValueType.int_values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KeyValueType::int_values() const {
  // @@protoc_insertion_point(field_list:parameters.KeyValueType.int_values)
  return int_values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KeyValueType::mutable_int_values() {
  // @@protoc_insertion_point(field_mutable_list:parameters.KeyValueType.int_values)
  return &int_values_;
}

// repeated int64 long_values = 7;
inline int KeyValueType::long_values_size() const {
  return long_values_.size();
}
inline void KeyValueType::clear_long_values() {
  long_values_.Clear();
}
inline ::google::protobuf::int64 KeyValueType::long_values(int index) const {
  // @@protoc_insertion_point(field_get:parameters.KeyValueType.long_values)
  return long_values_.Get(index);
}
inline void KeyValueType::set_long_values(int index, ::google::protobuf::int64 value) {
  long_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:parameters.KeyValueType.long_values)
}
inline void KeyValueType::add_long_values(::google::protobuf::int64 value) {
  long_values_.Add(value);
  // @@protoc_insertion_point(field_add:parameters.KeyValueType.long_values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
KeyValueType::long_values() const {
  // @@protoc_insertion_point(field_list:parameters.KeyValueType.long_values)
  return long_values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
KeyValueType::mutable_long_values() {
  // @@protoc_insertion_point(field_mutable_list:parameters.KeyValueType.long_values)
  return &long_values_;
}

// repeated double double_values = 8;
inline int KeyValueType::double_values_size() const {
  return double_values_.size();
}
inline void KeyValueType::clear_double_values() {
  double_values_.Clear();
}
inline double KeyValueType::double_values(int index) const {
  // @@protoc_insertion_point(field_get:parameters.KeyValueType.double_values)
  return double_values_.Get(index);
}
inline void KeyValueType::set_double_values(int index, double value) {
  double_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:parameters.KeyValueType.double_values)
}
inline void KeyValueType::add_double_values(double value) {
  double_values_.Add(value);
  // @@protoc_insertion_point(field_add:parameters.KeyValueType.double_values)
}
inline const ::google::protobuf::RepeatedField< double >&
KeyValueType::double_values() const {
  // @@protoc_insertion_point(field_list:parameters.KeyValueType.double_values)
  return double_values_;
}
inline ::google::protobuf::RepeatedField< double >*
KeyValueType::mutable_double_values() {
  // @@protoc_insertion_point(field_mutable_list:parameters.KeyValueType.double_values)
  return &double_values_;
}

// repeated float float_values = 9;
inline int KeyValueType::float_values_size() const {
  return float_values_.size();
}
inline void KeyValueType::clear_float_values() {
  float_values_.Clear();
}
inline float KeyValueType::float_values(int index) const {
  // @@protoc_insertion_point(field_get:parameters.KeyValueType.float_values)
  return float_values_.Get(index);
}
inline void KeyValueType::set_float_values(int index, float value) {
  float_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:parameters.KeyValueType.float_values)
}
inline void KeyValueType::add_float_values(float value) {
  float_values_.Add(value);
  // @@protoc_insertion_point(field_add:parameters.KeyValueType.float_values)
}
inline const ::google::protobuf::RepeatedField< float >&
KeyValueType::float_values() const {
  // @@protoc_insertion_point(field_list:parameters.KeyValueType.float_values)
  return float_values_;
}
inline ::google::protobuf::RepeatedField< float >*
KeyValueType::mutable_float_values() {
  // @@protoc_insertion_point(field_mutable_list:parameters.KeyValueType.float_values)
  return &float_values_;
}

// repeated .parameters.NDArrayType NDArray_values = 10;
inline int KeyValueType::ndarray_values_size() const {
  return ndarray_values_.size();
}
inline void KeyValueType::clear_ndarray_values() {
  ndarray_values_.Clear();
}
inline const ::parameters::NDArrayType& KeyValueType::ndarray_values(int index) const {
  // @@protoc_insertion_point(field_get:parameters.KeyValueType.NDArray_values)
  return ndarray_values_.Get(index);
}
inline ::parameters::NDArrayType* KeyValueType::mutable_ndarray_values(int index) {
  // @@protoc_insertion_point(field_mutable:parameters.KeyValueType.NDArray_values)
  return ndarray_values_.Mutable(index);
}
inline ::parameters::NDArrayType* KeyValueType::add_ndarray_values() {
  // @@protoc_insertion_point(field_add:parameters.KeyValueType.NDArray_values)
  return ndarray_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::parameters::NDArrayType >&
KeyValueType::ndarray_values() const {
  // @@protoc_insertion_point(field_list:parameters.KeyValueType.NDArray_values)
  return ndarray_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::parameters::NDArrayType >*
KeyValueType::mutable_ndarray_values() {
  // @@protoc_insertion_point(field_mutable_list:parameters.KeyValueType.NDArray_values)
  return &ndarray_values_;
}

// -------------------------------------------------------------------

// VectorType

// -------------------------------------------------------------------

// TimeIndexedType

// repeated int64 time_index = 1;
inline int TimeIndexedType::time_index_size() const {
  return time_index_.size();
}
inline void TimeIndexedType::clear_time_index() {
  time_index_.Clear();
}
inline ::google::protobuf::int64 TimeIndexedType::time_index(int index) const {
  // @@protoc_insertion_point(field_get:parameters.TimeIndexedType.time_index)
  return time_index_.Get(index);
}
inline void TimeIndexedType::set_time_index(int index, ::google::protobuf::int64 value) {
  time_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:parameters.TimeIndexedType.time_index)
}
inline void TimeIndexedType::add_time_index(::google::protobuf::int64 value) {
  time_index_.Add(value);
  // @@protoc_insertion_point(field_add:parameters.TimeIndexedType.time_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TimeIndexedType::time_index() const {
  // @@protoc_insertion_point(field_list:parameters.TimeIndexedType.time_index)
  return time_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TimeIndexedType::mutable_time_index() {
  // @@protoc_insertion_point(field_mutable_list:parameters.TimeIndexedType.time_index)
  return &time_index_;
}

// repeated .parameters.NDArrayType array_values = 2;
inline int TimeIndexedType::array_values_size() const {
  return array_values_.size();
}
inline void TimeIndexedType::clear_array_values() {
  array_values_.Clear();
}
inline const ::parameters::NDArrayType& TimeIndexedType::array_values(int index) const {
  // @@protoc_insertion_point(field_get:parameters.TimeIndexedType.array_values)
  return array_values_.Get(index);
}
inline ::parameters::NDArrayType* TimeIndexedType::mutable_array_values(int index) {
  // @@protoc_insertion_point(field_mutable:parameters.TimeIndexedType.array_values)
  return array_values_.Mutable(index);
}
inline ::parameters::NDArrayType* TimeIndexedType::add_array_values() {
  // @@protoc_insertion_point(field_add:parameters.TimeIndexedType.array_values)
  return array_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::parameters::NDArrayType >&
TimeIndexedType::array_values() const {
  // @@protoc_insertion_point(field_list:parameters.TimeIndexedType.array_values)
  return array_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::parameters::NDArrayType >*
TimeIndexedType::mutable_array_values() {
  // @@protoc_insertion_point(field_mutable_list:parameters.TimeIndexedType.array_values)
  return &array_values_;
}

// repeated .parameters.KeyValueType KeyValue_values = 3;
inline int TimeIndexedType::keyvalue_values_size() const {
  return keyvalue_values_.size();
}
inline void TimeIndexedType::clear_keyvalue_values() {
  keyvalue_values_.Clear();
}
inline const ::parameters::KeyValueType& TimeIndexedType::keyvalue_values(int index) const {
  // @@protoc_insertion_point(field_get:parameters.TimeIndexedType.KeyValue_values)
  return keyvalue_values_.Get(index);
}
inline ::parameters::KeyValueType* TimeIndexedType::mutable_keyvalue_values(int index) {
  // @@protoc_insertion_point(field_mutable:parameters.TimeIndexedType.KeyValue_values)
  return keyvalue_values_.Mutable(index);
}
inline ::parameters::KeyValueType* TimeIndexedType::add_keyvalue_values() {
  // @@protoc_insertion_point(field_add:parameters.TimeIndexedType.KeyValue_values)
  return keyvalue_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::parameters::KeyValueType >&
TimeIndexedType::keyvalue_values() const {
  // @@protoc_insertion_point(field_list:parameters.TimeIndexedType.KeyValue_values)
  return keyvalue_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::parameters::KeyValueType >*
TimeIndexedType::mutable_keyvalue_values() {
  // @@protoc_insertion_point(field_mutable_list:parameters.TimeIndexedType.KeyValue_values)
  return &keyvalue_values_;
}

// repeated .parameters.VectorType vector_values = 5;
inline int TimeIndexedType::vector_values_size() const {
  return vector_values_.size();
}
inline void TimeIndexedType::clear_vector_values() {
  vector_values_.Clear();
}
inline const ::parameters::VectorType& TimeIndexedType::vector_values(int index) const {
  // @@protoc_insertion_point(field_get:parameters.TimeIndexedType.vector_values)
  return vector_values_.Get(index);
}
inline ::parameters::VectorType* TimeIndexedType::mutable_vector_values(int index) {
  // @@protoc_insertion_point(field_mutable:parameters.TimeIndexedType.vector_values)
  return vector_values_.Mutable(index);
}
inline ::parameters::VectorType* TimeIndexedType::add_vector_values() {
  // @@protoc_insertion_point(field_add:parameters.TimeIndexedType.vector_values)
  return vector_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::parameters::VectorType >&
TimeIndexedType::vector_values() const {
  // @@protoc_insertion_point(field_list:parameters.TimeIndexedType.vector_values)
  return vector_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::parameters::VectorType >*
TimeIndexedType::mutable_vector_values() {
  // @@protoc_insertion_point(field_mutable_list:parameters.TimeIndexedType.vector_values)
  return &vector_values_;
}

// -------------------------------------------------------------------

// Value

// optional .parameters.NDArrayType ndarray_data = 1;
inline bool Value::has_ndarray_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Value::set_has_ndarray_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Value::clear_has_ndarray_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Value::clear_ndarray_data() {
  if (ndarray_data_ != NULL) ndarray_data_->::parameters::NDArrayType::Clear();
  clear_has_ndarray_data();
}
inline const ::parameters::NDArrayType& Value::ndarray_data() const {
  // @@protoc_insertion_point(field_get:parameters.Value.ndarray_data)
  return ndarray_data_ != NULL ? *ndarray_data_ : *default_instance_->ndarray_data_;
}
inline ::parameters::NDArrayType* Value::mutable_ndarray_data() {
  set_has_ndarray_data();
  if (ndarray_data_ == NULL) ndarray_data_ = new ::parameters::NDArrayType;
  // @@protoc_insertion_point(field_mutable:parameters.Value.ndarray_data)
  return ndarray_data_;
}
inline ::parameters::NDArrayType* Value::release_ndarray_data() {
  clear_has_ndarray_data();
  ::parameters::NDArrayType* temp = ndarray_data_;
  ndarray_data_ = NULL;
  return temp;
}
inline void Value::set_allocated_ndarray_data(::parameters::NDArrayType* ndarray_data) {
  delete ndarray_data_;
  ndarray_data_ = ndarray_data;
  if (ndarray_data) {
    set_has_ndarray_data();
  } else {
    clear_has_ndarray_data();
  }
  // @@protoc_insertion_point(field_set_allocated:parameters.Value.ndarray_data)
}

// optional .parameters.KeyValueType keyvalue_data = 2;
inline bool Value::has_keyvalue_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Value::set_has_keyvalue_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Value::clear_has_keyvalue_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Value::clear_keyvalue_data() {
  if (keyvalue_data_ != NULL) keyvalue_data_->::parameters::KeyValueType::Clear();
  clear_has_keyvalue_data();
}
inline const ::parameters::KeyValueType& Value::keyvalue_data() const {
  // @@protoc_insertion_point(field_get:parameters.Value.keyvalue_data)
  return keyvalue_data_ != NULL ? *keyvalue_data_ : *default_instance_->keyvalue_data_;
}
inline ::parameters::KeyValueType* Value::mutable_keyvalue_data() {
  set_has_keyvalue_data();
  if (keyvalue_data_ == NULL) keyvalue_data_ = new ::parameters::KeyValueType;
  // @@protoc_insertion_point(field_mutable:parameters.Value.keyvalue_data)
  return keyvalue_data_;
}
inline ::parameters::KeyValueType* Value::release_keyvalue_data() {
  clear_has_keyvalue_data();
  ::parameters::KeyValueType* temp = keyvalue_data_;
  keyvalue_data_ = NULL;
  return temp;
}
inline void Value::set_allocated_keyvalue_data(::parameters::KeyValueType* keyvalue_data) {
  delete keyvalue_data_;
  keyvalue_data_ = keyvalue_data;
  if (keyvalue_data) {
    set_has_keyvalue_data();
  } else {
    clear_has_keyvalue_data();
  }
  // @@protoc_insertion_point(field_set_allocated:parameters.Value.keyvalue_data)
}

// optional .parameters.VectorType vector_data = 4;
inline bool Value::has_vector_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Value::set_has_vector_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Value::clear_has_vector_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Value::clear_vector_data() {
  if (vector_data_ != NULL) vector_data_->::parameters::VectorType::Clear();
  clear_has_vector_data();
}
inline const ::parameters::VectorType& Value::vector_data() const {
  // @@protoc_insertion_point(field_get:parameters.Value.vector_data)
  return vector_data_ != NULL ? *vector_data_ : *default_instance_->vector_data_;
}
inline ::parameters::VectorType* Value::mutable_vector_data() {
  set_has_vector_data();
  if (vector_data_ == NULL) vector_data_ = new ::parameters::VectorType;
  // @@protoc_insertion_point(field_mutable:parameters.Value.vector_data)
  return vector_data_;
}
inline ::parameters::VectorType* Value::release_vector_data() {
  clear_has_vector_data();
  ::parameters::VectorType* temp = vector_data_;
  vector_data_ = NULL;
  return temp;
}
inline void Value::set_allocated_vector_data(::parameters::VectorType* vector_data) {
  delete vector_data_;
  vector_data_ = vector_data;
  if (vector_data) {
    set_has_vector_data();
  } else {
    clear_has_vector_data();
  }
  // @@protoc_insertion_point(field_set_allocated:parameters.Value.vector_data)
}

// optional .parameters.TimeIndexedType timeindexed_data = 5;
inline bool Value::has_timeindexed_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Value::set_has_timeindexed_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Value::clear_has_timeindexed_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Value::clear_timeindexed_data() {
  if (timeindexed_data_ != NULL) timeindexed_data_->::parameters::TimeIndexedType::Clear();
  clear_has_timeindexed_data();
}
inline const ::parameters::TimeIndexedType& Value::timeindexed_data() const {
  // @@protoc_insertion_point(field_get:parameters.Value.timeindexed_data)
  return timeindexed_data_ != NULL ? *timeindexed_data_ : *default_instance_->timeindexed_data_;
}
inline ::parameters::TimeIndexedType* Value::mutable_timeindexed_data() {
  set_has_timeindexed_data();
  if (timeindexed_data_ == NULL) timeindexed_data_ = new ::parameters::TimeIndexedType;
  // @@protoc_insertion_point(field_mutable:parameters.Value.timeindexed_data)
  return timeindexed_data_;
}
inline ::parameters::TimeIndexedType* Value::release_timeindexed_data() {
  clear_has_timeindexed_data();
  ::parameters::TimeIndexedType* temp = timeindexed_data_;
  timeindexed_data_ = NULL;
  return temp;
}
inline void Value::set_allocated_timeindexed_data(::parameters::TimeIndexedType* timeindexed_data) {
  delete timeindexed_data_;
  timeindexed_data_ = timeindexed_data;
  if (timeindexed_data) {
    set_has_timeindexed_data();
  } else {
    clear_has_timeindexed_data();
  }
  // @@protoc_insertion_point(field_set_allocated:parameters.Value.timeindexed_data)
}

// -------------------------------------------------------------------

// Parameter

// required string name = 1;
inline bool Parameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Parameter::name() const {
  // @@protoc_insertion_point(field_get:parameters.Parameter.name)
  return *name_;
}
inline void Parameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:parameters.Parameter.name)
}
inline void Parameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:parameters.Parameter.name)
}
inline void Parameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:parameters.Parameter.name)
}
inline ::std::string* Parameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:parameters.Parameter.name)
  return name_;
}
inline ::std::string* Parameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Parameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:parameters.Parameter.name)
}

// required string tree_root = 2;
inline bool Parameter::has_tree_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Parameter::set_has_tree_root() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Parameter::clear_has_tree_root() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Parameter::clear_tree_root() {
  if (tree_root_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tree_root_->clear();
  }
  clear_has_tree_root();
}
inline const ::std::string& Parameter::tree_root() const {
  // @@protoc_insertion_point(field_get:parameters.Parameter.tree_root)
  return *tree_root_;
}
inline void Parameter::set_tree_root(const ::std::string& value) {
  set_has_tree_root();
  if (tree_root_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tree_root_ = new ::std::string;
  }
  tree_root_->assign(value);
  // @@protoc_insertion_point(field_set:parameters.Parameter.tree_root)
}
inline void Parameter::set_tree_root(const char* value) {
  set_has_tree_root();
  if (tree_root_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tree_root_ = new ::std::string;
  }
  tree_root_->assign(value);
  // @@protoc_insertion_point(field_set_char:parameters.Parameter.tree_root)
}
inline void Parameter::set_tree_root(const char* value, size_t size) {
  set_has_tree_root();
  if (tree_root_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tree_root_ = new ::std::string;
  }
  tree_root_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:parameters.Parameter.tree_root)
}
inline ::std::string* Parameter::mutable_tree_root() {
  set_has_tree_root();
  if (tree_root_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tree_root_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:parameters.Parameter.tree_root)
  return tree_root_;
}
inline ::std::string* Parameter::release_tree_root() {
  clear_has_tree_root();
  if (tree_root_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tree_root_;
    tree_root_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Parameter::set_allocated_tree_root(::std::string* tree_root) {
  if (tree_root_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tree_root_;
  }
  if (tree_root) {
    set_has_tree_root();
    tree_root_ = tree_root;
  } else {
    clear_has_tree_root();
    tree_root_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:parameters.Parameter.tree_root)
}

// optional string platform_specific_name = 3;
inline bool Parameter::has_platform_specific_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Parameter::set_has_platform_specific_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Parameter::clear_has_platform_specific_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Parameter::clear_platform_specific_name() {
  if (platform_specific_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_specific_name_->clear();
  }
  clear_has_platform_specific_name();
}
inline const ::std::string& Parameter::platform_specific_name() const {
  // @@protoc_insertion_point(field_get:parameters.Parameter.platform_specific_name)
  return *platform_specific_name_;
}
inline void Parameter::set_platform_specific_name(const ::std::string& value) {
  set_has_platform_specific_name();
  if (platform_specific_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_specific_name_ = new ::std::string;
  }
  platform_specific_name_->assign(value);
  // @@protoc_insertion_point(field_set:parameters.Parameter.platform_specific_name)
}
inline void Parameter::set_platform_specific_name(const char* value) {
  set_has_platform_specific_name();
  if (platform_specific_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_specific_name_ = new ::std::string;
  }
  platform_specific_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:parameters.Parameter.platform_specific_name)
}
inline void Parameter::set_platform_specific_name(const char* value, size_t size) {
  set_has_platform_specific_name();
  if (platform_specific_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_specific_name_ = new ::std::string;
  }
  platform_specific_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:parameters.Parameter.platform_specific_name)
}
inline ::std::string* Parameter::mutable_platform_specific_name() {
  set_has_platform_specific_name();
  if (platform_specific_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_specific_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:parameters.Parameter.platform_specific_name)
  return platform_specific_name_;
}
inline ::std::string* Parameter::release_platform_specific_name() {
  clear_has_platform_specific_name();
  if (platform_specific_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_specific_name_;
    platform_specific_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Parameter::set_allocated_platform_specific_name(::std::string* platform_specific_name) {
  if (platform_specific_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_specific_name_;
  }
  if (platform_specific_name) {
    set_has_platform_specific_name();
    platform_specific_name_ = platform_specific_name;
  } else {
    clear_has_platform_specific_name();
    platform_specific_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:parameters.Parameter.platform_specific_name)
}

// optional string platform_agnostic_name = 4;
inline bool Parameter::has_platform_agnostic_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Parameter::set_has_platform_agnostic_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Parameter::clear_has_platform_agnostic_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Parameter::clear_platform_agnostic_name() {
  if (platform_agnostic_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_agnostic_name_->clear();
  }
  clear_has_platform_agnostic_name();
}
inline const ::std::string& Parameter::platform_agnostic_name() const {
  // @@protoc_insertion_point(field_get:parameters.Parameter.platform_agnostic_name)
  return *platform_agnostic_name_;
}
inline void Parameter::set_platform_agnostic_name(const ::std::string& value) {
  set_has_platform_agnostic_name();
  if (platform_agnostic_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_agnostic_name_ = new ::std::string;
  }
  platform_agnostic_name_->assign(value);
  // @@protoc_insertion_point(field_set:parameters.Parameter.platform_agnostic_name)
}
inline void Parameter::set_platform_agnostic_name(const char* value) {
  set_has_platform_agnostic_name();
  if (platform_agnostic_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_agnostic_name_ = new ::std::string;
  }
  platform_agnostic_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:parameters.Parameter.platform_agnostic_name)
}
inline void Parameter::set_platform_agnostic_name(const char* value, size_t size) {
  set_has_platform_agnostic_name();
  if (platform_agnostic_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_agnostic_name_ = new ::std::string;
  }
  platform_agnostic_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:parameters.Parameter.platform_agnostic_name)
}
inline ::std::string* Parameter::mutable_platform_agnostic_name() {
  set_has_platform_agnostic_name();
  if (platform_agnostic_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_agnostic_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:parameters.Parameter.platform_agnostic_name)
  return platform_agnostic_name_;
}
inline ::std::string* Parameter::release_platform_agnostic_name() {
  clear_has_platform_agnostic_name();
  if (platform_agnostic_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_agnostic_name_;
    platform_agnostic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Parameter::set_allocated_platform_agnostic_name(::std::string* platform_agnostic_name) {
  if (platform_agnostic_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_agnostic_name_;
  }
  if (platform_agnostic_name) {
    set_has_platform_agnostic_name();
    platform_agnostic_name_ = platform_agnostic_name;
  } else {
    clear_has_platform_agnostic_name();
    platform_agnostic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:parameters.Parameter.platform_agnostic_name)
}

// optional int64 timestamp_data = 5;
inline bool Parameter::has_timestamp_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Parameter::set_has_timestamp_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Parameter::clear_has_timestamp_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Parameter::clear_timestamp_data() {
  timestamp_data_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_data();
}
inline ::google::protobuf::int64 Parameter::timestamp_data() const {
  // @@protoc_insertion_point(field_get:parameters.Parameter.timestamp_data)
  return timestamp_data_;
}
inline void Parameter::set_timestamp_data(::google::protobuf::int64 value) {
  set_has_timestamp_data();
  timestamp_data_ = value;
  // @@protoc_insertion_point(field_set:parameters.Parameter.timestamp_data)
}

// optional .parameters.Value value_data = 6;
inline bool Parameter::has_value_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Parameter::set_has_value_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Parameter::clear_has_value_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Parameter::clear_value_data() {
  if (value_data_ != NULL) value_data_->::parameters::Value::Clear();
  clear_has_value_data();
}
inline const ::parameters::Value& Parameter::value_data() const {
  // @@protoc_insertion_point(field_get:parameters.Parameter.value_data)
  return value_data_ != NULL ? *value_data_ : *default_instance_->value_data_;
}
inline ::parameters::Value* Parameter::mutable_value_data() {
  set_has_value_data();
  if (value_data_ == NULL) value_data_ = new ::parameters::Value;
  // @@protoc_insertion_point(field_mutable:parameters.Parameter.value_data)
  return value_data_;
}
inline ::parameters::Value* Parameter::release_value_data() {
  clear_has_value_data();
  ::parameters::Value* temp = value_data_;
  value_data_ = NULL;
  return temp;
}
inline void Parameter::set_allocated_value_data(::parameters::Value* value_data) {
  delete value_data_;
  value_data_ = value_data;
  if (value_data) {
    set_has_value_data();
  } else {
    clear_has_value_data();
  }
  // @@protoc_insertion_point(field_set_allocated:parameters.Parameter.value_data)
}

// optional string tooltip = 7;
inline bool Parameter::has_tooltip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Parameter::set_has_tooltip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Parameter::clear_has_tooltip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Parameter::clear_tooltip() {
  if (tooltip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tooltip_->clear();
  }
  clear_has_tooltip();
}
inline const ::std::string& Parameter::tooltip() const {
  // @@protoc_insertion_point(field_get:parameters.Parameter.tooltip)
  return *tooltip_;
}
inline void Parameter::set_tooltip(const ::std::string& value) {
  set_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tooltip_ = new ::std::string;
  }
  tooltip_->assign(value);
  // @@protoc_insertion_point(field_set:parameters.Parameter.tooltip)
}
inline void Parameter::set_tooltip(const char* value) {
  set_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tooltip_ = new ::std::string;
  }
  tooltip_->assign(value);
  // @@protoc_insertion_point(field_set_char:parameters.Parameter.tooltip)
}
inline void Parameter::set_tooltip(const char* value, size_t size) {
  set_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tooltip_ = new ::std::string;
  }
  tooltip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:parameters.Parameter.tooltip)
}
inline ::std::string* Parameter::mutable_tooltip() {
  set_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tooltip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:parameters.Parameter.tooltip)
  return tooltip_;
}
inline ::std::string* Parameter::release_tooltip() {
  clear_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tooltip_;
    tooltip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Parameter::set_allocated_tooltip(::std::string* tooltip) {
  if (tooltip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tooltip_;
  }
  if (tooltip) {
    set_has_tooltip();
    tooltip_ = tooltip;
  } else {
    clear_has_tooltip();
    tooltip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:parameters.Parameter.tooltip)
}

// optional string description = 8;
inline bool Parameter::has_description() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Parameter::set_has_description() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Parameter::clear_has_description() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Parameter::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Parameter::description() const {
  // @@protoc_insertion_point(field_get:parameters.Parameter.description)
  return *description_;
}
inline void Parameter::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:parameters.Parameter.description)
}
inline void Parameter::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:parameters.Parameter.description)
}
inline void Parameter::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:parameters.Parameter.description)
}
inline ::std::string* Parameter::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:parameters.Parameter.description)
  return description_;
}
inline ::std::string* Parameter::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Parameter::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:parameters.Parameter.description)
}

// optional .parameters.ParameterType parameter_type = 9;
inline bool Parameter::has_parameter_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Parameter::set_has_parameter_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Parameter::clear_has_parameter_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Parameter::clear_parameter_type() {
  parameter_type_ = 0;
  clear_has_parameter_type();
}
inline ::parameters::ParameterType Parameter::parameter_type() const {
  // @@protoc_insertion_point(field_get:parameters.Parameter.parameter_type)
  return static_cast< ::parameters::ParameterType >(parameter_type_);
}
inline void Parameter::set_parameter_type(::parameters::ParameterType value) {
  assert(::parameters::ParameterType_IsValid(value));
  set_has_parameter_type();
  parameter_type_ = value;
  // @@protoc_insertion_point(field_set:parameters.Parameter.parameter_type)
}

// optional string platform_type_name = 10;
inline bool Parameter::has_platform_type_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Parameter::set_has_platform_type_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Parameter::clear_has_platform_type_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Parameter::clear_platform_type_name() {
  if (platform_type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_type_name_->clear();
  }
  clear_has_platform_type_name();
}
inline const ::std::string& Parameter::platform_type_name() const {
  // @@protoc_insertion_point(field_get:parameters.Parameter.platform_type_name)
  return *platform_type_name_;
}
inline void Parameter::set_platform_type_name(const ::std::string& value) {
  set_has_platform_type_name();
  if (platform_type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_type_name_ = new ::std::string;
  }
  platform_type_name_->assign(value);
  // @@protoc_insertion_point(field_set:parameters.Parameter.platform_type_name)
}
inline void Parameter::set_platform_type_name(const char* value) {
  set_has_platform_type_name();
  if (platform_type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_type_name_ = new ::std::string;
  }
  platform_type_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:parameters.Parameter.platform_type_name)
}
inline void Parameter::set_platform_type_name(const char* value, size_t size) {
  set_has_platform_type_name();
  if (platform_type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_type_name_ = new ::std::string;
  }
  platform_type_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:parameters.Parameter.platform_type_name)
}
inline ::std::string* Parameter::mutable_platform_type_name() {
  set_has_platform_type_name();
  if (platform_type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_type_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:parameters.Parameter.platform_type_name)
  return platform_type_name_;
}
inline ::std::string* Parameter::release_platform_type_name() {
  clear_has_platform_type_name();
  if (platform_type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_type_name_;
    platform_type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Parameter::set_allocated_platform_type_name(::std::string* platform_type_name) {
  if (platform_type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_type_name_;
  }
  if (platform_type_name) {
    set_has_platform_type_name();
    platform_type_name_ = platform_type_name;
  } else {
    clear_has_platform_type_name();
    platform_type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:parameters.Parameter.platform_type_name)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace parameters

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::parameters::ParameterType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::parameters::ParameterType>() {
  return ::parameters::ParameterType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_parameter_2eproto__INCLUDED
